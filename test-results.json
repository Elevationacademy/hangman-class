{"numFailedTestSuites":1,"numFailedTests":3,"numPassedTestSuites":0,"numPassedTests":1,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTotalTestSuites":1,"numTotalTests":4,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1539106065507,"success":false,"testResults":[{"console":null,"failureMessage":"  ● The game should have a \"restart game\" button with the class \"restart-button\"\n\n    expect(received).toHaveLength(length)\n\n    Expected value to have length:\n      1\n    Received:\n      {Symbol(enzyme.__unrendered__): null, Symbol(enzyme.__renderer__): {\"batchedUpdates\": [Function batchedUpdates], \"getNode\": [Function getNode], \"render\": [Function render], \"simulateError\": [Function simulateError], \"simulateEvent\": [Function simulateEvent], \"unmount\": [Function unmount]}, Symbol(enzyme.__root__): {Symbol(enzyme.__unrendered__): <App />, Symbol(enzyme.__renderer__): {\"batchedUpdates\": [Function batchedUpdates], \"getNode\": [Function getNode], \"render\": [Function render], \"simulateError\": [Function simulateError], \"simulateEvent\": [Function simulateEvent], \"unmount\": [Function unmount]}, Symbol(enzyme.__root__): [Circular], Symbol(enzyme.__node__): {\"instance\": {\"_reactInternalFiber\": {\"_debugID\": 61, \"_debugIsCurrentlyTiming\": false, \"_debugOwner\": [FiberNode], \"_debugSource\": null, \"actualDuration\": 0, \"actualStartTime\": 0, \"alternate\": null, \"child\": [FiberNode], \"effectTag\": 1, \"expirationTime\": 0, \"firstEffect\": null, \"index\": 0, \"key\": null, \"lastEffect\": null, \"memoizedProps\": [Object], \"memoizedState\": null, \"mode\": 0, \"nextEffect\": null, \"pendingProps\": [Object], \"ref\": null, \"return\": [FiberNode], \"selfBaseTime\": 0, \"sibling\": null, \"stateNode\": [Circular], \"tag\": 2, \"treeBaseTime\": 0, \"type\": [Function App], \"updateQueue\": null}, \"_reactInternalInstance\": {}, \"context\": {}, \"props\": {}, \"refs\": {}, \"state\": null, \"updater\": {\"enqueueForceUpdate\": [Function enqueueForceUpdate], \"enqueueReplaceState\": [Function enqueueReplaceState], \"enqueueSetState\": [Function enqueueSetState], \"isMounted\": [Function isMounted]}}, \"key\": undefined, \"nodeType\": \"class\", \"props\": {}, \"ref\": null, \"rendered\": {\"instance\": <div><div … /><div … /></div>, \"key\": undefined, \"nodeType\": \"host\", \"props\": {\"children\": [Array]}, \"ref\": null, \"rendered\": [[Object], [Object]], \"type\": \"div\"}, \"type\": [Function App]}, Symbol(enzyme.__nodes__): [{\"instance\": {\"_reactInternalFiber\": [FiberNode], \"_reactInternalInstance\": [Object], \"context\": [Object], \"props\": [Object], \"refs\": [Object], \"state\": null, \"updater\": [Object]}, \"key\": undefined, \"nodeType\": \"class\", \"props\": {}, \"ref\": null, \"rendered\": {\"instance\": <div … />, \"key\": undefined, \"nodeType\": \"host\", \"props\": [Object], \"ref\": null, \"rendered\": [Array], \"type\": \"div\"}, \"type\": [Function App]}], Symbol(enzyme.__options__): {\"adapter\": {\"options\": {\"enableComponentDidUpdateOnSetState\": true, \"lifecycles\": [Object]}}}}, Symbol(enzyme.__node__): undefined, Symbol(enzyme.__nodes__): [], Symbol(enzyme.__rootNodes__): [{\"instance\": {\"_reactInternalFiber\": {\"_debugID\": 61, \"_debugIsCurrentlyTiming\": false, \"_debugOwner\": [FiberNode], \"_debugSource\": null, \"actualDuration\": 0, \"actualStartTime\": 0, \"alternate\": null, \"child\": [FiberNode], \"effectTag\": 1, \"expirationTime\": 0, \"firstEffect\": null, \"index\": 0, \"key\": null, \"lastEffect\": null, \"memoizedProps\": [Object], \"memoizedState\": null, \"mode\": 0, \"nextEffect\": null, \"pendingProps\": [Object], \"ref\": null, \"return\": [FiberNode], \"selfBaseTime\": 0, \"sibling\": null, \"stateNode\": [Circular], \"tag\": 2, \"treeBaseTime\": 0, \"type\": [Function App], \"updateQueue\": null}, \"_reactInternalInstance\": {}, \"context\": {}, \"props\": {}, \"refs\": {}, \"state\": null, \"updater\": {\"enqueueForceUpdate\": [Function enqueueForceUpdate], \"enqueueReplaceState\": [Function enqueueReplaceState], \"enqueueSetState\": [Function enqueueSetState], \"isMounted\": [Function isMounted]}}, \"key\": undefined, \"nodeType\": \"class\", \"props\": {}, \"ref\": null, \"rendered\": {\"instance\": <div><div … /><div … /></div>, \"key\": undefined, \"nodeType\": \"host\", \"props\": {\"children\": [Array]}, \"ref\": null, \"rendered\": [[Object], [Object]], \"type\": \"div\"}, \"type\": [Function App]}], Symbol(enzyme.__options__): {\"adapter\": {\"options\": {\"enableComponentDidUpdateOnSetState\": true, \"lifecycles\": {\"componentDidUpdate\": [Object], \"getDerivedStateFromProps\": true, \"getSnapshotBeforeUpdate\": true, \"setState\": [Object]}}}}}\n    received.length:\n      0\n\n      22 | it('The game should have a \"restart game\" button with the class \"restart-button\"', () => {\n      23 |     const wrapper = mount(<App />);\n    > 24 |     expect(wrapper.find('.restart-game')).toHaveLength(1);\n         |                                           ^\n      25 | });\n      26 | \n      27 | it('The game should provide a new word when clicking the restart button', () => {\n\n      at Object.newMatcher [as toHaveLength] (node_modules/jest-expect-message/dist/withMessage.js:23:14)\n      at Object.toHaveLength (.test/ex-4.test.js:24:43)\n\n  ● The game should provide a new word when clicking the restart button\n\n    TypeError: ReactWrapper::state(\"word\") requires that `state` not be `null` or `undefined`\n\n      28 |     const wrapper = mount(<App/>);\n      29 |     const restartButton = wrapper.find('.restart-game');\n    > 30 |     let oldWord = wrapper.state('word');\n         |                           ^\n      31 |     restartButton.simulate('click');\n      32 |     let newWord = wrapper.state('word');\n      33 |     expect(oldWord).not.toEqual(newWord);\n\n      at ReactWrapper.state (node_modules/enzyme/build/ReactWrapper.js:1019:19)\n      at Object.state (.test/ex-4.test.js:30:27)\n\n  ● The game should provide a new hint when clicking the restart button\n\n    TypeError: Cannot read property 'hint' of null\n\n      37 |     const wrapper = mount(<App/>);\n      38 |     const restartButton = wrapper.find('.restart-game');\n    > 39 |     let oldHint = wrapper.state().hint;\n         |                   ^\n      40 |     restartButton.simulate('click');\n      41 |     let newHint = wrapper.state().hint;\n      42 |     expect(oldHint).not.toEqual(newHint);\n\n      at Object.<anonymous> (.test/ex-4.test.js:39:19)\n","numFailingTests":3,"numPassingTests":1,"numPendingTests":0,"perfStats":{"end":1539106067643,"start":1539106066419},"snapshot":{"added":0,"fileDeleted":false,"matched":0,"unchecked":0,"unmatched":0,"updated":0,"uncheckedKeys":[]},"testFilePath":"/Users/tal/Documents/Projects/hangman-class/.test/ex-4.test.js","testResults":[{"ancestorTitles":[],"duration":19,"failureMessages":[],"fullName":"Application should render without crashing","location":null,"numPassingAsserts":0,"status":"passed","title":"Application should render without crashing"},{"ancestorTitles":[],"duration":58,"failureMessages":["Error: expect(received).toHaveLength(length)\n\nExpected value to have length:\n  1\nReceived:\n  {Symbol(enzyme.__unrendered__): null, Symbol(enzyme.__renderer__): {\"batchedUpdates\": [Function batchedUpdates], \"getNode\": [Function getNode], \"render\": [Function render], \"simulateError\": [Function simulateError], \"simulateEvent\": [Function simulateEvent], \"unmount\": [Function unmount]}, Symbol(enzyme.__root__): {Symbol(enzyme.__unrendered__): <App />, Symbol(enzyme.__renderer__): {\"batchedUpdates\": [Function batchedUpdates], \"getNode\": [Function getNode], \"render\": [Function render], \"simulateError\": [Function simulateError], \"simulateEvent\": [Function simulateEvent], \"unmount\": [Function unmount]}, Symbol(enzyme.__root__): [Circular], Symbol(enzyme.__node__): {\"instance\": {\"_reactInternalFiber\": {\"_debugID\": 61, \"_debugIsCurrentlyTiming\": false, \"_debugOwner\": [FiberNode], \"_debugSource\": null, \"actualDuration\": 0, \"actualStartTime\": 0, \"alternate\": null, \"child\": [FiberNode], \"effectTag\": 1, \"expirationTime\": 0, \"firstEffect\": null, \"index\": 0, \"key\": null, \"lastEffect\": null, \"memoizedProps\": [Object], \"memoizedState\": null, \"mode\": 0, \"nextEffect\": null, \"pendingProps\": [Object], \"ref\": null, \"return\": [FiberNode], \"selfBaseTime\": 0, \"sibling\": null, \"stateNode\": [Circular], \"tag\": 2, \"treeBaseTime\": 0, \"type\": [Function App], \"updateQueue\": null}, \"_reactInternalInstance\": {}, \"context\": {}, \"props\": {}, \"refs\": {}, \"state\": null, \"updater\": {\"enqueueForceUpdate\": [Function enqueueForceUpdate], \"enqueueReplaceState\": [Function enqueueReplaceState], \"enqueueSetState\": [Function enqueueSetState], \"isMounted\": [Function isMounted]}}, \"key\": undefined, \"nodeType\": \"class\", \"props\": {}, \"ref\": null, \"rendered\": {\"instance\": <div><div … /><div … /></div>, \"key\": undefined, \"nodeType\": \"host\", \"props\": {\"children\": [Array]}, \"ref\": null, \"rendered\": [[Object], [Object]], \"type\": \"div\"}, \"type\": [Function App]}, Symbol(enzyme.__nodes__): [{\"instance\": {\"_reactInternalFiber\": [FiberNode], \"_reactInternalInstance\": [Object], \"context\": [Object], \"props\": [Object], \"refs\": [Object], \"state\": null, \"updater\": [Object]}, \"key\": undefined, \"nodeType\": \"class\", \"props\": {}, \"ref\": null, \"rendered\": {\"instance\": <div … />, \"key\": undefined, \"nodeType\": \"host\", \"props\": [Object], \"ref\": null, \"rendered\": [Array], \"type\": \"div\"}, \"type\": [Function App]}], Symbol(enzyme.__options__): {\"adapter\": {\"options\": {\"enableComponentDidUpdateOnSetState\": true, \"lifecycles\": [Object]}}}}, Symbol(enzyme.__node__): undefined, Symbol(enzyme.__nodes__): [], Symbol(enzyme.__rootNodes__): [{\"instance\": {\"_reactInternalFiber\": {\"_debugID\": 61, \"_debugIsCurrentlyTiming\": false, \"_debugOwner\": [FiberNode], \"_debugSource\": null, \"actualDuration\": 0, \"actualStartTime\": 0, \"alternate\": null, \"child\": [FiberNode], \"effectTag\": 1, \"expirationTime\": 0, \"firstEffect\": null, \"index\": 0, \"key\": null, \"lastEffect\": null, \"memoizedProps\": [Object], \"memoizedState\": null, \"mode\": 0, \"nextEffect\": null, \"pendingProps\": [Object], \"ref\": null, \"return\": [FiberNode], \"selfBaseTime\": 0, \"sibling\": null, \"stateNode\": [Circular], \"tag\": 2, \"treeBaseTime\": 0, \"type\": [Function App], \"updateQueue\": null}, \"_reactInternalInstance\": {}, \"context\": {}, \"props\": {}, \"refs\": {}, \"state\": null, \"updater\": {\"enqueueForceUpdate\": [Function enqueueForceUpdate], \"enqueueReplaceState\": [Function enqueueReplaceState], \"enqueueSetState\": [Function enqueueSetState], \"isMounted\": [Function isMounted]}}, \"key\": undefined, \"nodeType\": \"class\", \"props\": {}, \"ref\": null, \"rendered\": {\"instance\": <div><div … /><div … /></div>, \"key\": undefined, \"nodeType\": \"host\", \"props\": {\"children\": [Array]}, \"ref\": null, \"rendered\": [[Object], [Object]], \"type\": \"div\"}, \"type\": [Function App]}], Symbol(enzyme.__options__): {\"adapter\": {\"options\": {\"enableComponentDidUpdateOnSetState\": true, \"lifecycles\": {\"componentDidUpdate\": [Object], \"getDerivedStateFromProps\": true, \"getSnapshotBeforeUpdate\": true, \"setState\": [Object]}}}}}\nreceived.length:\n  0\n    at Object.newMatcher [as toHaveLength] (/Users/tal/Documents/Projects/hangman-class/node_modules/jest-expect-message/dist/withMessage.js:23:14)\n    at Object.toHaveLength (/Users/tal/Documents/Projects/hangman-class/.test/ex-4.test.js:24:43)\n    at Object.asyncJestTest (/Users/tal/Documents/Projects/hangman-class/node_modules/jest-jasmine2/build/jasmine_async.js:108:37)\n    at resolve (/Users/tal/Documents/Projects/hangman-class/node_modules/jest-jasmine2/build/queue_runner.js:56:12)\n    at new Promise (<anonymous>)\n    at mapper (/Users/tal/Documents/Projects/hangman-class/node_modules/jest-jasmine2/build/queue_runner.js:43:19)\n    at promise.then (/Users/tal/Documents/Projects/hangman-class/node_modules/jest-jasmine2/build/queue_runner.js:87:41)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"],"fullName":"The game should have a \"restart game\" button with the class \"restart-button\"","location":null,"numPassingAsserts":0,"status":"failed","title":"The game should have a \"restart game\" button with the class \"restart-button\""},{"ancestorTitles":[],"duration":3,"failureMessages":["TypeError: ReactWrapper::state(\"word\") requires that `state` not be `null` or `undefined`\n    at ReactWrapper.state (/Users/tal/Documents/Projects/hangman-class/node_modules/enzyme/build/ReactWrapper.js:1019:19)\n    at Object.state (/Users/tal/Documents/Projects/hangman-class/.test/ex-4.test.js:30:27)\n    at Object.asyncJestTest (/Users/tal/Documents/Projects/hangman-class/node_modules/jest-jasmine2/build/jasmine_async.js:108:37)\n    at resolve (/Users/tal/Documents/Projects/hangman-class/node_modules/jest-jasmine2/build/queue_runner.js:56:12)\n    at new Promise (<anonymous>)\n    at mapper (/Users/tal/Documents/Projects/hangman-class/node_modules/jest-jasmine2/build/queue_runner.js:43:19)\n    at promise.then (/Users/tal/Documents/Projects/hangman-class/node_modules/jest-jasmine2/build/queue_runner.js:87:41)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"],"fullName":"The game should provide a new word when clicking the restart button","location":null,"numPassingAsserts":0,"status":"failed","title":"The game should provide a new word when clicking the restart button"},{"ancestorTitles":[],"duration":6,"failureMessages":["TypeError: Cannot read property 'hint' of null\n    at Object.<anonymous> (/Users/tal/Documents/Projects/hangman-class/.test/ex-4.test.js:39:19)\n    at Object.asyncJestTest (/Users/tal/Documents/Projects/hangman-class/node_modules/jest-jasmine2/build/jasmine_async.js:108:37)\n    at resolve (/Users/tal/Documents/Projects/hangman-class/node_modules/jest-jasmine2/build/queue_runner.js:56:12)\n    at new Promise (<anonymous>)\n    at mapper (/Users/tal/Documents/Projects/hangman-class/node_modules/jest-jasmine2/build/queue_runner.js:43:19)\n    at promise.then (/Users/tal/Documents/Projects/hangman-class/node_modules/jest-jasmine2/build/queue_runner.js:87:41)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"],"fullName":"The game should provide a new hint when clicking the restart button","location":null,"numPassingAsserts":0,"status":"failed","title":"The game should provide a new hint when clicking the restart button"}],"sourceMaps":{},"skipped":false,"leaks":false}],"wasInterrupted":false}